<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>太空射击小游戏</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(to bottom, #0f0c29, #302b63, #24243e);
            font-family: 'Arial', sans-serif;
            color: white;
            overflow: hidden;
        }
        
        #game-container {
            position: relative;
            width: 800px;
            text-align: center;
        }
        
        #game-canvas {
            border: 3px solid #4a47a3;
            border-radius: 5px;
            background-color: #000;
            box-shadow: 0 0 20px rgba(74, 71, 163, 0.7);
        }
        
        #game-ui {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 18px;
        }
        
        #score, #lives {
            background-color: rgba(0, 0, 0, 0.5);
            padding: 5px 15px;
            border-radius: 20px;
            border: 1px solid #4a47a3;
        }
        
        #game-over, #game-start {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 5px;
        }
        
        #game-over {
            display: none;
        }
        
        h1 {
            color: #6c63ff;
            text-shadow: 0 0 10px rgba(108, 99, 255, 0.7);
            margin-bottom: 20px;
        }
        
        button {
            background: linear-gradient(to right, #6c63ff, #4a47a3);
            border: none;
            color: white;
            padding: 12px 30px;
            font-size: 18px;
            border-radius: 30px;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s;
            box-shadow: 0 0 15px rgba(108, 99, 255, 0.5);
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(108, 99, 255, 0.8);
        }
        
        .instructions {
            margin-top: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 15px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .instructions p {
            margin: 5px 0;
        }
        
        .key {
            display: inline-block;
            background-color: #333;
            padding: 2px 8px;
            border-radius: 4px;
            margin: 0 2px;
            border: 1px solid #6c63ff;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="game-ui">
            <div id="score">得分: 0</div>
            <div id="lives">生命: 3</div>
        </div>
        <canvas id="game-canvas" width="800" height="500"></canvas>
        
        <div id="game-start">
            <h1>太空射击小游戏</h1>
            <button id="start-button">开始游戏</button>
            <div class="instructions">
                <p>使用 <span class="key">←</span> <span class="key">→</span> 箭头键移动飞船</p>
                <p>按 <span class="key">空格键</span> 发射激光</p>
                <p>击中敌人获得10分，被敌人撞到失去1条生命</p>
            </div>
        </div>
        
        <div id="game-over">
            <h1>游戏结束</h1>
            <p id="final-score">最终得分: 0</p>
            <button id="restart-button">再玩一次</button>
        </div>
    </div>

    <script>
        // 获取游戏元素
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const livesElement = document.getElementById('lives');
        const gameStartElement = document.getElementById('game-start');
        const gameOverElement = document.getElementById('game-over');
        const finalScoreElement = document.getElementById('final-score');
        const startButton = document.getElementById('start-button');
        const restartButton = document.getElementById('restart-button');
        
        // 游戏变量
        let score = 0;
        let lives = 3;
        let gameRunning = false;
        
        // 玩家飞船
        const player = {
            x: canvas.width / 2 - 25,
            y: canvas.height - 60,
            width: 50,
            height: 40,
            speed: 7,
            color: '#6c63ff'
        };
        
        // 子弹数组
        let bullets = [];
        
        // 敌人数组
        let enemies = [];
        
        // 按键状态
        const keys = {
            ArrowLeft: false,
            ArrowRight: false,
            Space: false
        };
        
        // 绘制玩家飞船
        function drawPlayer() {
            ctx.fillStyle = player.color;
            
            // 绘制飞船主体
            ctx.beginPath();
            ctx.moveTo(player.x + player.width / 2, player.y);
            ctx.lineTo(player.x + player.width, player.y + player.height);
            ctx.lineTo(player.x, player.y + player.height);
            ctx.closePath();
            ctx.fill();
            
            // 绘制飞船尾翼
            ctx.fillStyle = '#4a47a3';
            ctx.fillRect(player.x + player.width / 2 - 5, player.y + player.height, 10, 15);
        }
        
        // 绘制子弹
        function drawBullets() {
            ctx.fillStyle = '#00ff9d';
            bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }
        
        // 绘制敌人
        function drawEnemies() {
            ctx.fillStyle = '#ff4d6d';
            enemies.forEach(enemy => {
                ctx.beginPath();
                ctx.arc(enemy.x + enemy.width / 2, enemy.y + enemy.height / 2, enemy.width / 2, 0, Math.PI * 2);
                ctx.fill();
                
                // 绘制敌人内部细节
                ctx.fillStyle = '#ff8fa3';
                ctx.beginPath();
                ctx.arc(enemy.x + enemy.width / 2, enemy.y + enemy.height / 2, enemy.width / 4, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.fillStyle = '#ff4d6d';
            });
        }
        
        // 绘制星星背景
        function drawStars() {
            ctx.fillStyle = 'white';
            for (let i = 0; i < 100; i++) {
                const x = Math.random() * canvas.width;
                const y = Math.random() * canvas.height;
                const size = Math.random() * 2;
                ctx.fillRect(x, y, size, size);
            }
        }
        
        // 更新玩家位置
        function updatePlayer() {
            if (keys.ArrowLeft && player.x > 0) {
                player.x -= player.speed;
            }
            if (keys.ArrowRight && player.x < canvas.width - player.width) {
                player.x += player.speed;
            }
        }
        
        // 更新子弹位置
        function updateBullets() {
            // 移动子弹
            bullets.forEach((bullet, index) => {
                bullet.y -= bullet.speed;
                
                // 移除超出屏幕的子弹
                if (bullet.y < 0) {
                    bullets.splice(index, 1);
                }
            });
        }
        
        // 生成敌人
        function spawnEnemy() {
            if (Math.random() < 0.03) { // 每帧有3%的几率生成敌人
                const width = 30 + Math.random() * 20;
                enemies.push({
                    x: Math.random() * (canvas.width - width),
                    y: -width,
                    width: width,
                    height: width,
                    speed: 1 + Math.random() * 2
                });
            }
        }
        
        // 更新敌人位置
        function updateEnemies() {
            enemies.forEach((enemy, index) => {
                enemy.y += enemy.speed;
                
                // 移除超出屏幕的敌人
                if (enemy.y > canvas.height) {
                    enemies.splice(index, 1);
                }
            });
        }
        
        // 检测碰撞
        function checkCollisions() {
            // 子弹与敌人碰撞
            bullets.forEach((bullet, bIndex) => {
                enemies.forEach((enemy, eIndex) => {
                    if (
                        bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.y + bullet.height > enemy.y
                    ) {
                        // 碰撞发生
                        bullets.splice(bIndex, 1);
                        enemies.splice(eIndex, 1);
                        score += 10;
                        scoreElement.textContent = `得分: ${score}`;
                    }
                });
            });
            
            // 玩家与敌人碰撞
            enemies.forEach((enemy, index) => {
                if (
                    player.x < enemy.x + enemy.width &&
                    player.x + player.width > enemy.x &&
                    player.y < enemy.y + enemy.height &&
                    player.y + player.height > enemy.y
                ) {
                    // 碰撞发生
                    enemies.splice(index, 1);
                    lives--;
                    livesElement.textContent = `生命: ${lives}`;
                    
                    if (lives <= 0) {
                        gameOver();
                    }
                }
            });
        }
        
        // 发射子弹
        function shoot() {
            bullets.push({
                x: player.x + player.width / 2 - 2.5,
                y: player.y,
                width: 5,
                height: 15,
                speed: 10
            });
        }
        
        // 游戏循环
        function gameLoop() {
            if (!gameRunning) return;
            
            // 清空画布
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 绘制背景
            drawStars();
            
            // 更新游戏状态
            updatePlayer();
            updateBullets();
            spawnEnemy();
            updateEnemies();
            checkCollisions();
            
            // 绘制游戏元素
            drawPlayer();
            drawBullets();
            drawEnemies();
            
            // 继续游戏循环
            requestAnimationFrame(gameLoop);
        }
        
        // 开始游戏
        function startGame() {
            score = 0;
            lives = 3;
            bullets = [];
            enemies = [];
            
            scoreElement.textContent = `得分: ${score}`;
            livesElement.textContent = `生命: ${lives}`;
            
            player.x = canvas.width / 2 - 25;
            player.y = canvas.height - 60;
            
            gameStartElement.style.display = 'none';
            gameOverElement.style.display = 'none';
            
            gameRunning = true;
            gameLoop();
        }
        
        // 游戏结束
        function gameOver() {
            gameRunning = false;
            finalScoreElement.textContent = `最终得分: ${score}`;
            gameOverElement.style.display = 'flex';
        }
        
        // 事件监听
        startButton.addEventListener('click', startGame);
        restartButton.addEventListener('click', startGame);
        
        document.addEventListener('keydown', (e) => {
            if (e.code in keys) {
                keys[e.code] = true;
                
                // 防止空格键滚动页面
                if (e.code === 'Space') {
                    e.preventDefault();
                    
                    // 只在游戏运行时发射子弹
                    if (gameRunning) {
                        shoot();
                    }
                }
            }
        });
        
        document.addEventListener('keyup', (e) => {
            if (e.code in keys) {
                keys[e.code] = false;
            }
        });
    </script>
</body>
</html>